/*
 */
package no.nels.galaxyhistorybrowser;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.InputStream;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author kjetikl
 */
public class GUI extends javax.swing.JFrame {

    private GalaxyHistoryArchive historyArchive=null;
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        progressbar.setVisible(false);
        fileTextField.getDocument().addDocumentListener(new DocumentListener() {
                @Override
                public void insertUpdate(DocumentEvent e) {
                    openHistoryButton.setEnabled(!fileTextField.getText().trim().isEmpty());
                }

                @Override
                public void removeUpdate(DocumentEvent e) {
                    openHistoryButton.setEnabled(!fileTextField.getText().trim().isEmpty());
                }

                @Override
                public void changedUpdate(DocumentEvent e) {
                    openHistoryButton.setEnabled(!fileTextField.getText().trim().isEmpty());
                }
        });  
        fileTextField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openHistoryButtonActionPerformed(e);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        innerTop = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        filePanel = new javax.swing.JPanel();
        browseButton = new javax.swing.JButton();
        fileTextField = new javax.swing.JTextField();
        openHistoryButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        innerPanel = new javax.swing.JPanel();
        mainTop = new javax.swing.JPanel();
        historyNameLabel = new javax.swing.JLabel();
        historyAttributesLabel = new javax.swing.JLabel();
        splitPane = new javax.swing.JSplitPane();
        historyTreeScrollPane = new javax.swing.JScrollPane();
        historyTree = new javax.swing.JTree();
        previewSplitPane = new javax.swing.JSplitPane();
        metadataTopPane = new javax.swing.JPanel();
        metadataTitlePanel = new javax.swing.JPanel();
        metadataLabel = new javax.swing.JLabel();
        metadataMainPanel = new javax.swing.JPanel();
        metadataScrollPane = new javax.swing.JScrollPane();
        metadataTextArea = new javax.swing.JTextArea();
        viewTopPanel = new javax.swing.JPanel();
        viewControls = new javax.swing.JPanel();
        viewDatasetButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        viewSizeSelector = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        viewScrollPane = new javax.swing.JScrollPane();
        viewTextArea = new javax.swing.JTextArea();
        statusPanel = new javax.swing.JPanel();
        progressbar = new javax.swing.JProgressBar();
        statusMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Galaxy History Browser");

        topPanel.setLayout(new java.awt.BorderLayout());

        innerTop.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4), javax.swing.BorderFactory.createEtchedBorder()));
        innerTop.setMinimumSize(new java.awt.Dimension(216, 50));
        innerTop.setPreferredSize(new java.awt.Dimension(773, 50));

        jLabel1.setText("File / URL");

        filePanel.setLayout(new java.awt.BorderLayout());

        browseButton.setText("...");
        browseButton.setMaximumSize(new java.awt.Dimension(28, 23));
        browseButton.setMinimumSize(new java.awt.Dimension(28, 23));
        browseButton.setPreferredSize(new java.awt.Dimension(28, 23));
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        filePanel.add(browseButton, java.awt.BorderLayout.LINE_END);
        filePanel.add(fileTextField, java.awt.BorderLayout.CENTER);

        openHistoryButton.setText("Open");
        openHistoryButton.setEnabled(false);
        openHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openHistoryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout innerTopLayout = new javax.swing.GroupLayout(innerTop);
        innerTop.setLayout(innerTopLayout);
        innerTopLayout.setHorizontalGroup(
            innerTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(innerTopLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addGap(5, 5, 5)
                .addComponent(filePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 913, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(openHistoryButton)
                .addContainerGap())
        );
        innerTopLayout.setVerticalGroup(
            innerTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(innerTopLayout.createSequentialGroup()
                .addGroup(innerTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(innerTopLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel1))
                    .addGroup(innerTopLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(innerTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(filePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(openHistoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(8, 8, 8))
        );

        topPanel.add(innerTop, java.awt.BorderLayout.CENTER);

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.setLayout(new java.awt.BorderLayout());

        innerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        innerPanel.setLayout(new java.awt.BorderLayout());

        mainTop.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4), javax.swing.BorderFactory.createEtchedBorder()));
        mainTop.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 16, 5));

        historyNameLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        historyNameLabel.setText(" ");
        mainTop.add(historyNameLabel);

        historyAttributesLabel.setText(" ");
        mainTop.add(historyAttributesLabel);

        innerPanel.add(mainTop, java.awt.BorderLayout.PAGE_START);

        historyTreeScrollPane.setPreferredSize(new java.awt.Dimension(300, 100));

        historyTree.setModel(null);
        historyTreeScrollPane.setViewportView(historyTree);

        splitPane.setLeftComponent(historyTreeScrollPane);

        previewSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        metadataTopPane.setLayout(new java.awt.BorderLayout());

        metadataTitlePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        metadataLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        metadataLabel.setText("Metadata");
        metadataTitlePanel.add(metadataLabel);

        metadataTopPane.add(metadataTitlePanel, java.awt.BorderLayout.PAGE_START);

        metadataMainPanel.setLayout(new java.awt.BorderLayout());

        metadataTextArea.setEditable(false);
        metadataTextArea.setColumns(20);
        metadataTextArea.setRows(5);
        metadataScrollPane.setViewportView(metadataTextArea);

        metadataMainPanel.add(metadataScrollPane, java.awt.BorderLayout.CENTER);

        metadataTopPane.add(metadataMainPanel, java.awt.BorderLayout.CENTER);

        previewSplitPane.setTopComponent(metadataTopPane);

        viewTopPanel.setLayout(new java.awt.BorderLayout());

        viewControls.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        viewDatasetButton.setText("View Dataset");
        viewDatasetButton.setEnabled(false);
        viewDatasetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDatasetButtonActionPerformed(evt);
            }
        });
        viewControls.add(viewDatasetButton);

        jLabel3.setText("       Load first");
        viewControls.add(jLabel3);

        viewSizeSelector.setModel(new javax.swing.SpinnerNumberModel(2000, 10, 100000, 1));
        viewControls.add(viewSizeSelector);

        jLabel4.setText("bytes");
        viewControls.add(jLabel4);

        viewTopPanel.add(viewControls, java.awt.BorderLayout.PAGE_START);

        viewTextArea.setEditable(false);
        viewTextArea.setColumns(20);
        viewTextArea.setRows(5);
        viewScrollPane.setViewportView(viewTextArea);

        viewTopPanel.add(viewScrollPane, java.awt.BorderLayout.CENTER);

        previewSplitPane.setRightComponent(viewTopPanel);

        splitPane.setRightComponent(previewSplitPane);

        innerPanel.add(splitPane, java.awt.BorderLayout.CENTER);

        mainPanel.add(innerPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        statusPanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4), javax.swing.BorderFactory.createEtchedBorder()), javax.swing.BorderFactory.createEmptyBorder(0, 10, 0, 0)));
        statusPanel.setPreferredSize(new java.awt.Dimension(196, 40));
        statusPanel.setLayout(new java.awt.BorderLayout(10, 0));

        progressbar.setBorder(javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4));
        progressbar.setFocusable(false);
        progressbar.setRequestFocusEnabled(false);
        statusPanel.add(progressbar, java.awt.BorderLayout.LINE_END);
        statusPanel.add(statusMessage, java.awt.BorderLayout.LINE_START);

        getContentPane().add(statusPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File f) {
                String name=f.getName();
                return (name.endsWith(".tar.gz") || name.endsWith(".tgz"));
            }
            @Override
            public String getDescription() {
                return "Galaxy History Archive (*.tar.gz, *.tgz)";
            }
        });  
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            fileTextField.setText(selectedFile.getAbsolutePath());
            openHistoryButtonActionPerformed(null); // open the file right away
        }
        
    }//GEN-LAST:event_browseButtonActionPerformed

    private void openHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openHistoryButtonActionPerformed
        // open history file, read it and initialize the components (tree and metadata) 
        SwingWorker worker = new SwingWorker<Boolean, Object>() {
            Exception error=null;
            @Override
            public Boolean doInBackground() {
                try {
                    String pathname=fileTextField.getText();
                    if (pathname==null || pathname.trim().isEmpty()) throw new Exception("Missing file or URL");
                    historyArchive=new GalaxyHistoryArchive(pathname);
                    historyArchive.initialize(null);
                } catch (Exception e) {
                    error=e;
                    return false;
                }
                return true;
            }

            @Override
            protected void done() {
                progressbar.setIndeterminate(false);
                progressbar.setVisible(false);
                if (error!=null) showErrorMessage(error.getMessage());
                else {
                    showStatusMessage("OK");
                    showHistory(historyArchive);
                }
            }
        };
        showStatusMessage("Opening Galaxy History...");
        progressbar.setIndeterminate(true);
        progressbar.setVisible(true);
        viewDatasetButton.setEnabled(false);
        worker.execute();      
    }//GEN-LAST:event_openHistoryButtonActionPerformed

    private void viewDatasetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDatasetButtonActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)historyTree.getLastSelectedPathComponent();
        if (node!=null && node.isLeaf()){
            Map dataset=(Map)node.getUserObject();
            String filename=(String)dataset.get("file_name");
            if (filename==null) {
                showErrorMessage("Missing filepath for dataset");
            } else {
                int bytes=(int)viewSizeSelector.getValue();
                displayDataset(filename,bytes);
            }
        }
    }//GEN-LAST:event_viewDatasetButtonActionPerformed

    private void showErrorMessage(String message) {
        statusMessage.setForeground(Color.red);        
        statusMessage.setText("ERROR: "+message);
    }
    
    private void showStatusMessage(String message) {
        statusMessage.setForeground(Color.black);
        statusMessage.setText(message);
    }    
    
    /** Displays the contents of the history archive in the GUI. The historyArchive should already have been processed and validated */
    private void showHistory(GalaxyHistoryArchive historyArchive) {
        try {
            historyNameLabel.setText(historyArchive.getHistoryAttribute("name"));
            String attributes="";
            String tags=historyArchive.getHistoryAttribute("tags");
            String annotation=historyArchive.getHistoryAttribute("annotation");
            String created=historyArchive.getHistoryAttribute("create_time");
            String updated=historyArchive.getHistoryAttribute("update_time");
            if (created!=null && !created.isEmpty()) attributes+="  Created="+created.substring(0,16);
            if (updated!=null && !updated.isEmpty()) attributes+=",  Updated="+updated.substring(0,16);
            if (tags!=null && !tags.isEmpty()) attributes+=",  Tags=["+tags+"]";
            if (annotation!=null && !annotation.isEmpty()) attributes+=",  Annotation="+annotation;
            historyAttributesLabel.setText(attributes);
            // 
            DefaultMutableTreeNode root=getTreeRepresentation(historyArchive.getHistory());
            historyTree.setCellRenderer(new HistoryRenderer());
            historyTree.setRootVisible(false);
            historyTree.setModel(new DefaultTreeModel(root));    
            historyTree.addTreeSelectionListener(new TreeSelectionListener() {
                @Override
                public void valueChanged(TreeSelectionEvent e) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode)historyTree.getLastSelectedPathComponent();
                    viewDatasetButton.setEnabled(node!=null && node.isLeaf());
                    showMetadata((node!=null)?(Map)node.getUserObject():null);
                    viewTextArea.setText("");
                }
            });
        } catch (Exception e) {
            showErrorMessage(e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void showMetadata(Map historyEntry) {
        if (historyEntry==null) metadataTextArea.setText("");
        else {
            StringBuilder builder=new StringBuilder();
            builder.append("Name: "+historyEntry.get("name")+"\n");
            if (historyEntry.containsKey("hid")) builder.append("HID: "+historyEntry.get("hid")+"\n");
            if (historyEntry.get("class").equals("dataset")) {
                builder.append("Type: dataset\n");
                builder.append("Format: "+historyEntry.get("extension")+"\n");
                builder.append("Size: "+historyEntry.get("size")+"\n");
                builder.append("Date: "+((String)historyEntry.get("create_time")).substring(0,16)+"\n");                
                builder.append("DBkey: "+historyEntry.get("dbkey")+"\n");
                builder.append("File: "+historyEntry.get("file_name"));
                if (historyEntry.containsKey("extra_files_path")) builder.append("      +("+historyEntry.get("extra_files_path")+")\n"); else builder.append("\n");
                builder.append("\n-------------- PREVIEW ----------------------\n\n"+historyEntry.get("peek"));               
            } else {
                List list=(List)((Map)historyEntry.get("collection")).get("elements");
                builder.append("Type: \""+historyEntry.get("class")+"\" collection with "+list.size()+" elements");
            }
            metadataTextArea.setText(builder.toString());    
            metadataTextArea.setCaretPosition(0);
        }
    }
    
    private void displayDataset(String filename, int bytes) {
        SwingWorker worker = new SwingWorker<Boolean, Object>() {
            Exception error=null;
            String contents=null;
            @Override
            public Boolean doInBackground() {
                try {
                    InputStream stream=historyArchive.getInputStreamForFile(filename);
                    byte[] buffer=new byte[bytes];
                    int length=stream.read(buffer);
                    contents=new String(buffer);
                } catch (Exception e) {
                    error=e;
                    return false;
                }
                return true;
            }

            @Override
            protected void done() {
                progressbar.setIndeterminate(false);
                progressbar.setVisible(false);
                if (error!=null) showErrorMessage(error.getMessage());
                else {
                    showStatusMessage("OK");
                    viewTextArea.setText(contents);
                    viewTextArea.setCaretPosition(0);
                }
            }
        };
        showStatusMessage("Loading dataset ("+bytes+" bytes)");
        progressbar.setIndeterminate(true);
        progressbar.setVisible(true);
        worker.execute();         
    }
    
    private DefaultMutableTreeNode getTreeRepresentation(List<Map> history) {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode("root");
        for (Map entry:history) {
            if (entry.get("class").equals("dataset")) {
                DefaultMutableTreeNode node = new DefaultMutableTreeNode(entry);
                root.add(node);
            } else { // history entry is a collection
                DefaultMutableTreeNode node = processCollection(entry);
                root.add(node);                
            }
        }     
        return root;
    }
    
    private DefaultMutableTreeNode processCollection(Map collection) {
        DefaultMutableTreeNode collectionNode=new DefaultMutableTreeNode(collection);
        List<Map> elements=(List<Map>)((Map)collection.get("collection")).get("elements");
        if (elements==null) {collectionNode.add(new DefaultMutableTreeNode(""+collection.toString()));return collectionNode;}
        if (collection.get("class").equals("list") || collection.get("class").equals("paired")) {           
            for (Map element:elements) {
                String nameInCollection=(String)element.get("name"); // the dataset can have been renamed in the list (different "display name")
                Map dataset=(Map)element.get("dataset");
                String originalName=(String)dataset.get("name");
                dataset.put("displayLabel", nameInCollection); // 
                dataset.put("datasetName", originalName); //   
                collectionNode.add(new DefaultMutableTreeNode(dataset));
            }
        } else if (collection.get("class").equals("list:paired")) {
            for (Map element:elements) {
                collectionNode.add(processCollection(element));
            }           
        }
        return collectionNode; // Default behaviour. This should not really happen
    }
    
    private class HistoryRenderer extends DefaultTreeCellRenderer {
        public HistoryRenderer() {
          super();
        }
        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean isSelected,boolean expanded,boolean leaf, int row,boolean hasFocus) {
            JLabel comp=(JLabel)super.getTreeCellRendererComponent(tree, value, isSelected, expanded, leaf, row, hasFocus);
            DefaultMutableTreeNode node=(DefaultMutableTreeNode)value;
            Object userobject=node.getUserObject();
            if (userobject instanceof Map) {
                Map historyEntry=(Map)userobject;
                Object hid=historyEntry.get("hid");
                String name=(String)historyEntry.get("name");
                if (historyEntry.containsKey("displayLabel")) {
                    name="<b><font color='blue'>"+historyEntry.get("displayLabel")+"</font></b> &rArr; "+historyEntry.get("datasetName");
                } else {
                    
                }
                String label=(hid!=null)?("[ "+hid+" ]:  "+name):name;
                comp.setText("<html>"+label+"</html>");
            } else {
                comp.setText("STRING: "+userobject);   
            }           
            return comp;
        }        
    }
    
    
    /**
     */
    public static void start() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JPanel filePanel;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JLabel historyAttributesLabel;
    private javax.swing.JLabel historyNameLabel;
    private javax.swing.JTree historyTree;
    private javax.swing.JScrollPane historyTreeScrollPane;
    private javax.swing.JPanel innerPanel;
    private javax.swing.JPanel innerTop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel mainTop;
    private javax.swing.JLabel metadataLabel;
    private javax.swing.JPanel metadataMainPanel;
    private javax.swing.JScrollPane metadataScrollPane;
    private javax.swing.JTextArea metadataTextArea;
    private javax.swing.JPanel metadataTitlePanel;
    private javax.swing.JPanel metadataTopPane;
    private javax.swing.JButton openHistoryButton;
    private javax.swing.JSplitPane previewSplitPane;
    private javax.swing.JProgressBar progressbar;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JLabel statusMessage;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JPanel viewControls;
    private javax.swing.JButton viewDatasetButton;
    private javax.swing.JScrollPane viewScrollPane;
    private javax.swing.JSpinner viewSizeSelector;
    private javax.swing.JTextArea viewTextArea;
    private javax.swing.JPanel viewTopPanel;
    // End of variables declaration//GEN-END:variables
}
